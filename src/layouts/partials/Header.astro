---
import Logo from "@/components/Logo.astro";
import LanguageSwitcher from "../../components/LanguageSwitcher.astro";
import { IoSearch } from "react-icons/io5";
import { getTranslation, type Language } from "../../lib/i18n";

// Get current language from URL
const urlLang = Astro.url.searchParams.get("lang") as Language;
const currentLang: Language = urlLang || "ja";

// TapForge navigation menu with i18n
const main = [
  { name: currentLang === "ko" ? "홈" : getTranslation(currentLang, "nav.home"), url: "/" },
  { name: currentLang === "ko" ? "특징" : getTranslation(currentLang, "nav.features"), url: "#features" },
  { name: currentLang === "ko" ? "가격" : getTranslation(currentLang, "nav.pricing"), url: "#pricing" },
  {
    name: currentLang === "ko" ? "후기" : getTranslation(currentLang, "nav.testimonials"),
    url: "#testimonials",
  },
  { name: currentLang === "ko" ? "FAQ" : getTranslation(currentLang, "nav.faq"), url: "#faq" },
  {
    name: currentLang === "ko" ? "문의" : getTranslation(currentLang, "nav.contact"),
    url: "https://cor-jp.com/contact/",
  },
];
---

<header class="header pt-6">
  <nav class="navbar container">
    <!-- logo -->
    <div class="order-0 flex-shrink-0">
      <Logo />
    </div>

    <!-- navbar toggler -->
    <input id="nav-toggle" type="checkbox" class="hidden" />
    <label
      id="show-button"
      for="nav-toggle"
      class="order-2 flex cursor-pointer items-center text-black md:order-1 md:hidden"
    >
      <svg class="h-6 fill-current" viewBox="0 0 20 20">
        <title>Menu Open</title>
        <path d="M0 3h20v2H0V3z m0 6h20v2H0V9z m0 6h20v2H0V0z"></path>
      </svg>
    </label>
    <label
      id="hide-button"
      for="nav-toggle"
      class="order-2 hidden cursor-pointer items-center text-black md:order-1"
    >
      <svg class="h-6 fill-current" viewBox="0 0 20 20">
        <title>Menu Close</title>
        <polygon
          points="11 9 22 9 22 11 11 11 11 22 9 22 9 11 -2 11 -2 9 9 9 9 -2 11 -2"
          transform="rotate(45 10 10)"></polygon>
      </svg>
    </label>
    <!-- /navbar toggler -->

    <!-- Navigation Menu -->
    <ul
      id="nav-menu"
      class="navbar-nav order-3 hidden w-full md:order-1 md:flex md:w-auto md:flex-1 md:justify-center md:max-w-lg"
    >
      {
        main.map((menu) => (
          <li class="nav-item">
            <a
              href={menu.url}
              class={`nav-link ${menu.url.startsWith("#") ? "smooth-scroll" : ""}`}
              target={menu.url.startsWith("http") ? "_blank" : undefined}
              rel={
                menu.url.startsWith("http") ? "noopener noreferrer" : undefined
              }
            >
              {menu.name}
            </a>
          </li>
        ))
      }
    </ul>

    <!-- Right side controls -->
    <div class="order-1 flex items-center md:order-2 md:flex-shrink-0">
      <!-- Language Switcher -->
      <div class="mr-2 md:mr-4">
        <LanguageSwitcher currentLang={currentLang} />
      </div>
      <!-- Search (optional for TapForge) -->
      <a
        class="inline-block cursor-pointer p-2 text-lg text-dark transition hover:text-primary md:text-xl"
        href="/search"
        title="search"
        aria-label="search"
      >
        <IoSearch />
      </a>
    </div>
  </nav>
</header>

<script>
  // Language switching functionality
  document.addEventListener("DOMContentLoaded", function () {
    // Get current language from URL or localStorage
    const urlParams = new URLSearchParams(window.location.search);
    const urlLang = urlParams.get("lang");
    const storedLang = localStorage.getItem("preferred-language");
    const currentLang = urlLang || storedLang || "ja";

    // Update language switcher display
    updateLanguageDisplay(currentLang);

    // Update page content based on language
    updatePageContent(currentLang);
    
    // Force Korean translation if needed
    if (currentLang === 'ko') {
      setTimeout(() => {
        forceKoreanHeaderTranslation();
      }, 100);
      setTimeout(() => {
        forceKoreanHeaderTranslation();
      }, 500);
      setTimeout(() => {
        forceKoreanHeaderTranslation();
      }, 1000);
    }
  });

  function updateLanguageDisplay(lang: string) {
    const languageButton = document.querySelector("#language-menu-button span");
    if (languageButton) {
      const languageNames = {
        ja: "日本語",
        en: "English",
        zh: "中文",
        es: "Español",
      };
      languageButton.textContent = (languageNames as any)[lang] || "日本語";
    }

    // Update language menu active state
    const languageMenu = document.querySelector("#language-menu");
    if (languageMenu) {
      const menuItems = languageMenu.querySelectorAll("a");
      menuItems.forEach((item) => {
        const href = item.getAttribute("href");
        const langMatch = href?.match(/lang=([^&]+)/);
        if (langMatch) {
          const itemLang = langMatch[1];
          if (itemLang === lang) {
            item.classList.add(
              "bg-blue-50",
              "text-blue-700",
              "border-r-2",
              "border-blue-500",
            );
            item.classList.remove("text-gray-700", "hover:bg-gray-50");
          } else {
            item.classList.remove(
              "bg-blue-50",
              "text-blue-700",
              "border-r-2",
              "border-blue-500",
            );
            item.classList.add("text-gray-700", "hover:bg-gray-50");
          }
        }
      });
    }
  }

  function updatePageContent(lang: string) {
    // Update navigation menu
    const navItems = document.querySelectorAll(".nav-link");
    const translations = {
      ja: {
        home: "ホーム",
        features: "特徴",
        pricing: "料金",
        testimonials: "レビュー",
        faq: "FAQ",
        contact: "お問い合わせ",
      },
      en: {
        home: "Home",
        features: "Features",
        pricing: "Pricing",
        testimonials: "Reviews",
        faq: "FAQ",
        contact: "Contact",
      },
      zh: {
        home: "首页",
        features: "特点",
        pricing: "价格",
        testimonials: "评价",
        faq: "FAQ",
        contact: "联系",
      },
      es: {
        home: "Inicio",
        features: "Características",
        pricing: "Precios",
        testimonials: "Testimonios",
        faq: "FAQ",
        contact: "Contacto",
      },
    };

    const t = (translations as any)[lang] || translations["ja"];

    navItems.forEach((item, index) => {
      const keys = [
        "home",
        "features",
        "pricing",
        "testimonials",
        "faq",
        "contact",
      ];
      if (keys[index]) {
        item.textContent = t[keys[index]];
      }
    });
  }

  // Smooth scroll functionality for anchor links
  const smoothScrollLinks = document.querySelectorAll(".smooth-scroll");

  smoothScrollLinks.forEach((link) => {
    link.addEventListener("click", function (e) {
      e.preventDefault();

      const targetId = (e.currentTarget as HTMLAnchorElement).getAttribute(
        "href",
      );
      if (targetId && targetId.startsWith("#")) {
        const targetElement = document.querySelector(targetId);
        if (targetElement) {
          targetElement.scrollIntoView({
            behavior: "smooth",
            block: "start",
          });
        }
      }
    });
  });

  function forceKoreanHeaderTranslation() {
    // Debug output removed
    
    // Force update navigation links
    const navLinks = document.querySelectorAll('#nav-menu .nav-link');
    const koreanNavLinks = ['홈', '특징', '가격', '후기', 'FAQ', '문의'];
    
    navLinks.forEach((link, index) => {
      if (link && koreanNavLinks[index]) {
        link.textContent = koreanNavLinks[index];
        // Debug output removed
      }
    });
    
    // Force update language switcher display
    const languageButton = document.querySelector('#language-menu-button span');
    if (languageButton) {
      languageButton.textContent = '한국어';
      // Debug output removed
    }
    
    // Force update search title and aria-label
    const searchLink = document.querySelector('a[href="/search"]');
    if (searchLink) {
      searchLink.setAttribute('title', '검색');
      searchLink.setAttribute('aria-label', '검색');
      // Debug output removed
    }
  }
</script>
