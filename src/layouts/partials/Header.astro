---
import Logo from "@/components/Logo.astro";
import LanguageSwitcher from "../../components/LanguageSwitcher.astro";
import { IoSearch } from "react-icons/io5";
import { getTranslation, type Language } from "../../lib/i18n";

// Get current language from URL
const currentLang: Language = Astro.url.searchParams.get('lang') as Language || 'ja';

// TapForge navigation menu with i18n
const main = [
  { name: getTranslation(currentLang, "nav.home"), url: "/" },
  { name: getTranslation(currentLang, "nav.features"), url: "#features" },
  { name: getTranslation(currentLang, "nav.pricing"), url: "#pricing" },
  { name: getTranslation(currentLang, "nav.testimonials"), url: "#testimonials" },
  { name: getTranslation(currentLang, "nav.faq"), url: "#faq" },
  { name: getTranslation(currentLang, "nav.contact"), url: "https://cor-jp.com/contact/" },
];
---

<header class="header pt-6">
  <nav class="navbar container">
    <!-- logo -->
    <div class="order-0">
      <Logo />
    </div>
    <!-- navbar toggler -->
    <input id="nav-toggle" type="checkbox" class="hidden" />
    <label
      id="show-button"
      for="nav-toggle"
      class="order-2 flex cursor-pointer items-center text-black md:order-1 md:hidden"
    >
      <svg class="h-6 fill-current" viewBox="0 0 20 20">
        <title>Menu Open</title>
        <path d="M0 3h20v2H0V3z m0 6h20v2H0V9z m0 6h20v2H0V0z"></path>
      </svg>
    </label>
    <label
      id="hide-button"
      for="nav-toggle"
      class="order-2 hidden cursor-pointer items-center text-black md:order-1"
    >
      <svg class="h-6 fill-current" viewBox="0 0 20 20">
        <title>Menu Close</title>
        <polygon
          points="11 9 22 9 22 11 11 11 11 22 9 22 9 11 -2 11 -2 9 9 9 9 -2 11 -2"
          transform="rotate(45 10 10)"></polygon>
      </svg>
    </label>
    <!-- /navbar toggler -->

    <ul
      id="nav-menu"
      class="navbar-nav order-3 hidden w-full md:order-1 md:flex md:w-auto"
    >
      {
        main.map((menu) => (
          <li class="nav-item">
            <a
              href={menu.url}
              class={`nav-link block ${menu.url.startsWith("#") ? "smooth-scroll" : ""}`}
              target={menu.url.startsWith("http") ? "_blank" : undefined}
              rel={
                menu.url.startsWith("http") ? "noopener noreferrer" : undefined
              }
            >
              {menu.name}
            </a>
          </li>
        ))
      }
    </ul>
        <div class="order-1 ml-auto flex items-center md:order-2 md:ml-0">
          <!-- Language Switcher -->
          <div class="mr-4">
            <LanguageSwitcher currentLang={currentLang} />
          </div>
      <!-- Search (optional for TapForge) -->
      <a
        class="inline-block cursor-pointer p-2 text-xl text-dark transition hover:text-primary"
        href="/search"
        title="search"
        aria-label="search"
      >
        <IoSearch />
      </a>
    </div>
  </nav>
</header>

<script>
  // Language switching functionality
  document.addEventListener("DOMContentLoaded", function () {
    // Get current language from URL or localStorage
    const urlParams = new URLSearchParams(window.location.search);
    const urlLang = urlParams.get('lang');
    const storedLang = localStorage.getItem('preferred-language');
    const currentLang = urlLang || storedLang || 'ja';
    
    // Update language switcher display
    updateLanguageDisplay(currentLang);
    
    // Update page content based on language
    updatePageContent(currentLang);
  });

  function updateLanguageDisplay(lang) {
    const languageButton = document.querySelector('#language-menu-button span');
    if (languageButton) {
      const languageNames = {
        'ja': '日本語',
        'en': 'English', 
        'zh': '中文',
        'es': 'Español'
      };
      languageButton.textContent = languageNames[lang] || '日本語';
    }
  }

  function updatePageContent(lang) {
    // Update navigation menu
    const navItems = document.querySelectorAll('.nav-link');
    const translations = {
      'ja': {
        home: 'ホーム',
        features: '特徴',
        pricing: '料金',
        testimonials: 'お客様の声',
        faq: 'FAQ',
        contact: 'お問い合わせ'
      },
      'en': {
        home: 'Home',
        features: 'Features',
        pricing: 'Pricing',
        testimonials: 'Testimonials',
        faq: 'FAQ',
        contact: 'Contact'
      },
      'zh': {
        home: '首页',
        features: '特点',
        pricing: '价格',
        testimonials: '客户评价',
        faq: '常见问题',
        contact: '联系我们'
      },
      'es': {
        home: 'Inicio',
        features: 'Características',
        pricing: 'Precios',
        testimonials: 'Testimonios',
        faq: 'Preguntas Frecuentes',
        contact: 'Contacto'
      }
    };

    const t = translations[lang] || translations['ja'];
    
    navItems.forEach((item, index) => {
      const keys = ['home', 'features', 'pricing', 'testimonials', 'faq', 'contact'];
      if (keys[index]) {
        item.textContent = t[keys[index]];
      }
    });
  }

  // Smooth scroll functionality for anchor links
  const smoothScrollLinks = document.querySelectorAll(".smooth-scroll");

  smoothScrollLinks.forEach((link) => {
    link.addEventListener("click", function (e) {
      e.preventDefault();

      const targetId = (e.currentTarget as HTMLAnchorElement).getAttribute("href");
      if (targetId && targetId.startsWith("#")) {
        const targetElement = document.querySelector(targetId);
        if (targetElement) {
          targetElement.scrollIntoView({
            behavior: "smooth",
            block: "start",
          });
        }
      }
    });
  });
</script>
