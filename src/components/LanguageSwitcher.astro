---
import { languages, type Language } from "../lib/i18n";

interface Props {
  currentLang?: Language;
}

const { currentLang = "ja" } = Astro.props;
---

<div class="relative inline-block text-left">
  <div>
    <button
      type="button"
      class="inline-flex w-full justify-center gap-x-1.5 rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
      id="language-menu-button"
      aria-expanded="false"
      aria-haspopup="true"
    >
      <span class="flex items-center">
        <span class="mr-2">🌐</span>
        {languages[currentLang]}
      </span>
      <svg
        class="-mr-1 h-5 w-5 text-gray-400"
        viewBox="0 0 20 20"
        fill="currentColor"
        aria-hidden="true"
      >
        <path
          fill-rule="evenodd"
          d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z"
          clip-rule="evenodd"></path>
      </svg>
    </button>
  </div>

  <div
    class="absolute right-0 z-10 mt-2 w-56 origin-top-right rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none hidden"
    role="menu"
    aria-orientation="vertical"
    aria-labelledby="language-menu-button"
    tabindex="-1"
  >
    <div class="py-1" role="none">
      {
        Object.entries(languages).map(([code, name]) => (
          <a
            href={`?lang=${code}`}
            class={`flex items-center px-4 py-2 text-sm ${
              code === currentLang
                ? "bg-blue-50 text-blue-700"
                : "text-gray-700 hover:bg-gray-100"
            }`}
            role="menuitem"
            tabindex="-1"
          >
            <span class="mr-3">
              {code === "ja" && "🇯🇵"}
              {code === "en" && "🇺🇸"}
              {code === "zh" && "🇨🇳"}
              {code === "es" && "🇪🇸"}
            </span>
            {name}
          </a>
        ))
      }
    </div>
  </div>
</div>

<script>
  // Language switcher functionality
  document.addEventListener("DOMContentLoaded", function () {
    const button = document.getElementById("language-menu-button");
    const menu = button?.nextElementSibling;

    if (button && menu) {
      button.addEventListener("click", function () {
        const isExpanded = button.getAttribute("aria-expanded") === "true";
        button.setAttribute("aria-expanded", String(!isExpanded));
        menu.classList.toggle("hidden");
      });

      // Close menu when clicking outside
      document.addEventListener("click", function (event) {
        if (
          !button.contains(event.target as Node) &&
          !menu.contains(event.target as Node)
        ) {
          button.setAttribute("aria-expanded", "false");
          menu.classList.add("hidden");
        }
      });
    }
  });
</script>
